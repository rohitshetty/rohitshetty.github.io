<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cat /rohit</title>
  <subtitle>Maker|Coder|Learner and everything in between</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rohitshetty.github.io/"/>
  <updated>2016-11-13T16:45:39.824Z</updated>
  <id>http://rohitshetty.github.io/</id>
  
  <author>
    <name>Rohit Shetty</name>
    <email>rohitfoss00@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESP8266 101</title>
    <link href="http://rohitshetty.github.io/2016/11/ESP101/"/>
    <id>http://rohitshetty.github.io/2016/11/ESP101/</id>
    <published>2016-11-13T12:35:00.000Z</published>
    <updated>2016-11-13T16:45:39.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Introduction to ESP8266 </em></strong></p>
<p>ESP8266 is an answer to most of the projects that requires internet/wi-fi connectivity.</p>
<p>It is cheap (like 3$ cheap) and its specifications are much much better than that of atmega’s(or arduino uno’s that use atmega).<br>It has a 32 bit CPU running at 80MHz with 64+96 KB of iRAM+dataRAM, and SPI Flash storage of atleast 512KB!. It supports
  IEEE 802.11 b/g/n WiFi. The power consumption is decent.<br>Considering the cost this is a steal!.</p>
<img src="/2016/11/ESP101/esp.jpg" alt="credits: sparkfun" title="credits: sparkfun">
<p>ESP8266 is a must toy for EC/CS students. The concepts of Computer Networking, Operating systems, Embedded systems and microcontrollers can be learnt hands-on using this one tiny chip!.</p>
<p>ESP8266 can connect to other WiFi Access Points(such as your WiFi router) as station or be the Acess Point itself(like your mobile hotspot) where other devices can connect to it and a third mode exists where it acts as both station and access point.</p>
<p>There are 2 ways to use ESP8266 in your project.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
        <td class="code"><pre><div class="line">|--As WiFi to Serial modem using AT commands</div><div class="line">|--Standalone mode.</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Most people use it as <strong><em>WiFi to serial modem.</em></strong> ESP8266 comes with AT firmware flashed. Which means you can send AT styled Commands over UART from other controllers(like Arduino) to ESP8266.</p>
<img src="/2016/11/ESP101/WiringDiagramEsp8266.png" alt="credits:https://github.com/mrizvic/nodemcu-uart2http-exosite" title="credits:https://github.com/mrizvic/nodemcu-uart2http-exosite">image credits: <a href="https://github.com/mrizvic/nodemcu-uart2http-exosite" target="_blank" rel="external">mrizvic</a><br><br><br>For
example to list all the wifi access points you would send <code>AT+CWLAP</code> from your Arduino over serial port to esp8266. Esp8266 will scan for all the access points available and reply back over serial port.<br><br>Although this is simple to use
there are tradeoffs. Issue with this approach is design would need one more microcontroller to send commands to ESP(usually its the arduino). Hence adding to cost, space and power consumption.<br>Moreover it is a shame to waste so much processing power
that comes with ESP8266 :( It is like using another vehicle to tow your car. It maybe needed in some case, but for most of the time we are better off not using it.<br><br><strong><em>Standalone</em></strong> method uses the processor on ESP8266 itself
as application processor. Hence reducing need of extra controller.<br>ESP8266 has 17 GPIO pins (number of exposed pins can vary from version to version for example ESP-1 had 4 GPIO and ESP12 module had 11 GPIO pins exposed).<br>The plus side is access
to faster CPU, larger RAM and flash storage.<br><br>ESP8266 can be programmed directly using many methods out of which below ones are the famous one<br><br> <strong><a href="http://www.nodemcu.com/index_en.html" target="_blank" rel="external">NodeMCU</a></strong><br><br> NodeMCU is
an opensource IOT Platform. You can use <em>lua</em> scripting language to code the ESP8266. Lua is asyncronous like JavaScript.<br><br> <strong><a href="https://github.com/esp8266/Arduino" target="_blank" rel="external">Arduino interface based</a> </strong><br><br> ESP8266 can be
programmed using Arduino IDE. This is by far the most easiest one. But if experience has taught us anything, it’s that the easy way out may not always lead to paradise. This introduces performance tradeoffs and is not prefered for some serious design.<br><br><strong><a href="http://hackaday.com/2016/07/21/micropython-on-the-esp8266-kicking-the-tires/" target="_blank" rel="external">MicroPython</a></strong><br><br> Its everyone’s favourite python on ESP8266!. I am yet to check this out, but again may have performance tradeoffs.<br><br><strong><a href="https://github.com/esp8266/esp8266-wiki" target="_blank" rel="external">Native SDK</a></strong><br><br> This is the most powerful of all methods. Like all things with power, this too is feared by many. It has a steep learning curve, and tutorial around this are hard
to find. This overcomes performance bottlenecks of the above methods.<br> This uses <em>C</em><br><br> Espressif releases it’s SDK periodically which can be used to code ESP8266. These come in 2 version.<br>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
      <td class="code"><pre><div class="line">|--RTOS based SDK.</div><div class="line">|--Non RTOS, callback based SDK.</div></pre></td>
    </tr>
  </table>
</figure>
<p>I prefer using native SDK and <em>C</em>, well because its more fun to work at bare-metal levels.<br>I am still learning to work around with ESP8266 and hopefully i will try to document it as i learn.</p>
<p>In Next post lets install <code>dev environment</code> for ESP8266 and try the <em>Helloworld</em> of embedded world.</p>
<p>Till then,<br>Happy tinkering.</p>
<p>PS:<br>There is this new kid in the block called ESP32 check him out!.</p>
<p>Few Resources on <code>Esp8266</code>:<br> Here is an awesome <a href="neilkolban.com/tech/esp8266">book on ESP8266</a><br> wonderful forum <a href="esp8266.com">everything esp8266</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Introduction to ESP8266 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ESP8266 is an answer to most of the projects that requires internet/wi-fi conne
    
    </summary>
    
      <category term="ESP8266" scheme="http://rohitshetty.github.io/categories/ESP8266/"/>
    
    
      <category term="ESP8266" scheme="http://rohitshetty.github.io/tags/ESP8266/"/>
    
      <category term="IoT" scheme="http://rohitshetty.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Hello-world My Journal</title>
    <link href="http://rohitshetty.github.io/2016/01/Hello-world-My-Journal/"/>
    <id>http://rohitshetty.github.io/2016/01/Hello-world-My-Journal/</id>
    <published>2016-01-26T07:59:29.000Z</published>
    <updated>2016-11-13T15:51:41.195Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Hello There, from Hexo</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello There, from Hexo&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://rohitshetty.github.io/tags/NodeJS/"/>
    
      <category term="hexo" scheme="http://rohitshetty.github.io/tags/hexo/"/>
    
      <category term="Static-page-generator" scheme="http://rohitshetty.github.io/tags/Static-page-generator/"/>
    
  </entry>
  
</feed>
